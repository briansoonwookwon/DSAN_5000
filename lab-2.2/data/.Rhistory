knitr::opts_chunk$set(echo = TRUE)
library('tidyverse')
# INSERT CODE TO READ THE DATA FILES
df1 = read.csv("./example-1.csv")
df2 = read.csv("./example-2.csv")
# LOOK AT FIRST COUPLE LINES
head(df1)
head(df2)
# LOOK AT LAST COUPLE LINES
tail(df1)
tail(df2)
colnames(df1)
colnames(df2)
## INSERT CODE TO REMOVE SPACES FROM COLUMN NAMES
print("NOT REQUIRED R REMOVES SPACES UPON READING")
# INSERT CODE TO RENAME THE COLUMN NAME "age" --> "age_years" and "country" as "country_of_origin"
df1$age_years = df1$age
df1$age = NULL
df2$country_of_origin = df2$country
df2$country = NULL
# PRINT THE MODIFIED COLUMN NAMES WHEN DONE
colnames(df1)
colnames(df2)
#INSERT CODE TO CONVERT TYPECAST "housing_payment_pesos" AS TYPE "FLOAT"
df2$housing_payment_pesos = as.numeric(df2$housing_payment_pesos)
str(df2)
#INSERT CODE TO CONVERT "housing_payment_pesos" to USD
# 1 Mexican Peso = 0.050 USD
# 1 USD = 19.88 Mexican Peso
#INSERT CODE TO RENAME "housing_payment_pesos" to "housing_payment_usd"
df2$housing_payment_usd = df2$housing_payment_pesos *0.05
df2$housing_payment_pesos = NULL
# INSERT CODE TO MAKE SURE ALL "US" TAGS equal "usa" and all "MEX" tags equal "mex"
df2[df2 ==' US' | df2 == ' USA' | df2 == ' usa'] <- 'usa'
df2[df2 ==' MEX' | df2 == ' mex'] <- 'mex'
# INSERT CODE TO DO AN "OUTER" JOIN FOR THE TWO DATA-FRAMES USING "CUSTOMER_ID" AS COMMON KEY
df = merge(df1,df2, by = "customer_id", all = T)
# INSERT CODE TO: REPLACE ALL CELLS THAT ARE ENTIRELY SPACE (OR EMPTY) WITH NAN
print("NOT NEEDED, R ALREADY DOES UPON READING")
# INSERT CODE TO PRINT THE SHAPE OF THE NEW DATAFRAME
dim(df)
# INSERT CODE TO COUNT THE NUMBER OF MISSING VALUES IN EACH COLUMN (use google)
colSums(is.na(df))
### INSERT CODE TO REMOVE THE COLUMNS "initials" AND "num_children",
df$initials = NULL
df$num_children = NULL
# INSERT CODE TO PRINT THE NEW DATA-FRAME AND ITS SHAPE
df
dim(df)
## INSERT CODE TO REPLACE THE STRING "nan" WITH NAN, PRINT THE NEW DATA-FRAME WHEN DONE
print("NOT NEEDED, R CONVERTED TO NA")
print(df)
## RUN THE FOLLOWING CODE, THIS USES A CONDITIONAL TO ONLY KEEP ROWS WHERE "age_years"=NaN
sample = df[is.na(df$age_years), ]
df= df[!is.na(df$age_years), ]
## INSERT CODE TO REPLACE ANY NEGATIVE "age_years" WITH NUMPY "NaN" OBJECT
## There are multiple ways to do this, for example you can iterate over the
# rows and use apply with a lambda function to enforce the conditional
df[df$age_years <0,4] <- NA
## RUN THE FOLLOWING CELL TO REMOVE ANY WHITE SPACE FROM "yearly_income_usd"
df$yearly_income_usd <- gsub(" ", "", df$yearly_income_usd)
## INSERT CODE TO REPLACE ANY "yearly_income_usd" THAT IS A STRING WITH NUMPY nan OBJECT
df$is_house_owner <- gsub("NaN", NA, df$is_house_owner)
# PRINT THE DATA FRAME
df
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# JUST PRINT THE OUTPUT, DONT RE-DEFINE THE DATAFRAME
df[complete.cases(df),]
# INSERT CODE TO TYPE-CAST ALL OF THE FOLLOWING COLUMNS AS FLOATS
# ["customer_id","age_years","account_balance_usd","yearly_income_usd","housing_payment_usd"]
str(df)
num_col = c("customer_id","age_years","account_balance_usd", "yearly_income_usd","housing_payment_usd")
df[df$yearly_income_usd=="USA",3] <- NA
df[num_col] = as.numeric(unlist(df[num_col]))
str(df)
# INSERT CODE TO COMPUTE AND PRINT THE MEAN,MEDIAN, AND STD DOWN THE COLUMNS (DO EACH IN ITS OWN CELL)
# NOTICE THAT ONLY THE NUMERICAL ROWS ARE COMPUTED (YOU CAN IGNORE ANY DEPRECATION WARNINGS)
# print((df[["age_years","account_balance_usd"]]).mean(axis=1))
#mean and median can be calculated through summary() function
summary(df)
#standard deviation
for (i in c(1:length(num_col))){
print(paste0(num_col[i]," sd:  ",sd(df[,num_col[i]], na.rm = TRUE)))
}
# INSERT CODE TO REPLACE ANY "NaN" in "age_years" WITH THE
df[is.na(df$age_years), 4] <- mean(df$age_years, na.rm = TRUE)
# INSERT CODE TO REPLACE ANY "NaN" in "yearly_income_usd" WITH THE MEDIAN
df[is.na(df$yearly_income_usd), 3] <- median(df$yearly_income_usd, na.rm = TRUE)
# INSERT CODE TO THROW AWAY ANY ROW WITH "NaN"
# THIS TIME RE-DEFINE THE DATAFRAME WITHOUT THE "NaN"
df = df[complete.cases(df),]
df
# INSERT CODE TO REMOVE ROWS WITH DUPLICATES IN "customer_id" (KEEP THE FIRST VALUE ENCOUNTERS)
df = df[!duplicated(df$customer_id), ]
# PRINT THE DATAFRAME
df
# INSERT CODE TO NORMALIZE THE COLUMN "housing_payment_usd"
# INSERT CODE TO RENAME THE COLUMN "housing_payment_usd" --> "housing_payment_normalized"
df$housing_payment_normalized = (df$housing_payment_usd - mean(df$housing_payment_usd)) / sd(df$housing_payment_usd)
df$housing_payment_usd = NULL
# PRINT THE DATA FRAME
df
